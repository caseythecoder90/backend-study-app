{
  "deckId": "spring-advanced-deck",
  "userId": "developer-123",
  "text": "Advanced Spring Framework concepts build upon the foundational IoC and DI principles. Aspect-Oriented Programming (AOP) is a powerful feature that allows developers to modularize cross-cutting concerns such as logging, security, transaction management, and caching. Spring AOP uses dynamic proxies (JDK proxies for interfaces or CGLIB proxies for classes) to weave aspects into target objects at runtime. The @Aspect annotation marks a class as an aspect, while @Before, @After, @Around, @AfterReturning, and @AfterThrowing define different types of advice. Pointcut expressions using @Pointcut define where advice should be applied. Transaction management in Spring can be declarative using @Transactional annotation or programmatic using TransactionTemplate. The @Transactional annotation supports various properties like propagation (REQUIRED, REQUIRES_NEW, NESTED, etc.), isolation levels, rollback conditions, and timeout settings. Spring's PlatformTransactionManager abstraction supports different transaction managers like DataSourceTransactionManager, JpaTransactionManager, and JtaTransactionManager. Spring Security provides comprehensive authentication and authorization capabilities through filters and interceptors. Method-level security can be enabled using @EnableGlobalMethodSecurity with annotations like @PreAuthorize, @PostAuthorize, @Secured, and @RolesAllowed. Spring Boot's auto-configuration mechanism works through @EnableAutoConfiguration, which imports configurations based on classpath scanning and conditional logic using @ConditionalOnClass, @ConditionalOnProperty, @ConditionalOnMissingBean, and other conditional annotations. Custom auto-configuration can be created by defining configuration classes in META-INF/spring.factories file. Actuator endpoints provide production-ready features like health checks, metrics, environment information, and application monitoring. Spring Data provides repository abstraction with interfaces like CrudRepository, JpaRepository, and PagingAndSortingRepository, enabling automatic query generation from method names and custom queries using @Query annotation. Spring Integration and Spring Cloud facilitate building microservices architectures with service discovery, circuit breakers, distributed configuration, and message-driven communication patterns.",
  "count": 12,
  "difficulty": "HARD",
  "category": "Spring Advanced",
  "model": "CLAUDE_3_5_SONNET"
}