{
  "deckId": "spring-fundamentals-deck",
  "userId": "developer-123",
  "text": "Spring Framework is a comprehensive, lightweight application framework for Java that provides infrastructure support for developing robust Java applications. The fundamental philosophy of Spring is built around two key concepts: Inversion of Control (IoC) and Dependency Injection (DI). The Spring Container, also known as the IoC Container, is the heart of the Spring Framework. It creates objects, configures them, assembles their dependencies, and manages their entire lifecycle from creation to destruction. There are two main types of containers: BeanFactory (basic container) and ApplicationContext (advanced container with additional features like event publishing and internationalization). Beans are the objects that form the backbone of your application and are managed by the Spring IoC container. A bean is an object that is instantiated, assembled, and managed by a Spring container. Bean definitions contain metadata about how to create a bean, its dependencies, and its configuration. Historically, Spring configuration was XML-based, where beans were defined in XML files using elements like <bean>, <property>, and <constructor-arg>. However, modern Spring applications have moved to annotation-driven configuration, which is more concise and easier to maintain. The @Component annotation is the main stereotype annotation that indicates a class is a Spring-managed component. It's the most generic stereotype annotation and serves as the foundation for other specialized annotations. @Service is a specialization of @Component used to annotate service layer classes that contain business logic. @Repository is another specialization of @Component used for data access layer classes, providing additional benefits like automatic exception translation. @Controller is used for presentation layer components, particularly in Spring MVC for handling web requests. These stereotype annotations (@Service, @Repository, @Controller) are essentially meta-annotations that extend @Component functionality while providing semantic meaning to different architectural layers. Dependency injection is achieved using the @Autowired annotation, which can be applied to constructors, methods, or fields to automatically inject dependencies by type. The @Qualifier annotation can be used alongside @Autowired when multiple beans of the same type exist. @Configuration classes are used to define beans programmatically using Java code instead of XML. Methods annotated with @Bean within @Configuration classes return objects that should be registered as beans in the Spring container. Component scanning is enabled using @ComponentScan annotation, which tells Spring where to look for annotated components. By default, Spring Boot enables component scanning for the package containing the main class and its sub-packages. @Autowired works by type (byType), but you can also use @Resource for byName injection. Constructor injection is generally preferred over field injection as it ensures immutable objects and makes dependencies explicit. Spring Boot revolutionized Spring development by providing auto-configuration, which automatically configures Spring applications based on the dependencies present in the classpath. Starter dependencies bundle commonly used libraries, making it easier to add functionality to applications. The @SpringBootApplication annotation combines @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations. Application properties can be configured in application.properties or application.yml files, with support for profiles using @Profile annotation or spring.profiles.active property. Spring's ApplicationContext publishes events that can be consumed using @EventListener annotation. The container supports various bean scopes including singleton (default), prototype, request, session, and application scopes. Lazy initialization can be controlled using @Lazy annotation, and beans can have initialization and destruction callbacks using @PostConstruct and @PreDestroy annotations.",
  "count": 15,
  "difficulty": "MEDIUM",
  "category": "Spring Framework",
  "model": "GPT_4O_MINI"
}